---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <div class="vote-container">
    <div class="vote">
      <h2>Let's Vote</h2>
      <div class="edit">
        <img src="src/assets/edit.svg" alt="edit">
        <p>Edit</p>
      </div>
      <form class="vote-form">
        <label>
          <span>Question</span>
          <p></p>
        </label>
        <label>
          <span>Description</span>
          <p></p>
        </label>
        <label>
          <span>Option</span>
          <p></p>
        </label>
        <ul></ul>
        <button type="submit">Vote</button>
      </form>
    </div>
  </div>
</Layout>

<script>
    document.addEventListener('DOMContentLoaded', () => {
      // Poll ID を URL から取得（例えば、URLが "/poll/:id" の場合）
const pollId = window.location.pathname.split("/").pop(); // URLからIDを取得

// サーバーから投票の詳細を取得する関数
async function fetchPollDetail() {
  try {
    const response = await fetch(`http://localhost:3001/api/poll/${pollId}`);
    if (!response.ok) {
      throw new Error("Failed to fetch poll details");
    }

    const poll = await response.json(); 

    const question = document.querySelector(".question") as HTMLElement;

    question.textContent = poll.question 

    const description = document.querySelector(".description") as HTMLElement;

    if (poll.description) {
      description.textContent = poll.description;
      description.style.display = "block"; 
    } else {
      description.style.display = "none"; 
    }

    const optionsList = document.querySelector(".options-list") as HTMLElement; 
    optionsList.innerHTML = ""; 

    poll.options.forEach((option, index) => {
      const listItem = document.createElement("li");
      listItem.textContent = `${option.text} (${option.votes} votes)`;
      optionsList.appendChild(listItem);
    });

      } catch (error) {
        console.error("Error fetching poll details:", error);
      }
    }
    fetchPollDetail()
    })
</script>

<style>

  .vote-container{
    display: flex;
		padding: 8px;
    margin:0 auto;
    align-items: center;
		justify-content: center;
    height:95vh;
    background-image: url('/src/assets/vote.jpg');
		background-size: cover;
		background-position: center;
    font-family: "VT323", monospace;
    font-weight: bold;
	}

  h2{
    text-align: center;
    font-size: 3rem;
    color:black;
  }

  .vote-form {
    display: flex;
    flex-direction: column;
    gap: 15px; 
    padding:40px;
    padding-top:16px;
    width: 520px;
    border: 3px solid black;
    background-color: white;
  }

 label {
  display: flex;
  flex-direction: column;
	margin-bottom: 16px;
}

 span{
	margin-bottom: 8px;
  font-size: 1.2rem;
}

input{
	padding:16px;
}

.vote-form button{
	width:100%;
	background-color:#2c2c2c;
	color:white;
	border-radius: 10px;
  cursor: pointer;
  padding:10px;
  font-size:1.2rem;
  box-shadow:2px 2px 0 2px black;
}

.vote-form button:hover{
  transform: translateY(4px);
  box-shadow: none;
  background-color: white;
  color: black;
}

.edit{
  display:flex;
}

.edit p{
  font-size: 1.5rem;
  padding-left: 10px;
}

img{
  width: 40px;
  height: 40px;
  rotate: 180deg;
  padding-right: 10px;
}

@media screen and (max-width: 767px) {
  .vote{
    width:80%;
  }

  .vote-form{
    width:80% !important;
    margin:0 auto;
  }
}

</style>