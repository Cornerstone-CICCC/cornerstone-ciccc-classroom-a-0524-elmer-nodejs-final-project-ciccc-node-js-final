---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <div class="home-container" id="home">
    <div class="main-visual">
      <div class="main-title">
        <h1 id="title">Voting App</h1>
        <div class="buttons">
          <button id="sign-up" role="button" aria-label="Sign up">Sign Up</button>
          <button id="log-in" role="button" aria-label="Log in">Log In</button>
        </div>
      </div>
    </div>
    <div class="voting-list">
      <div class="out-container">
        <h2>Voting List</h2>
        <div class="voting-list-container"></div>
        <div class="new-vote" role="button" aria-label="Create new vote">
          <p>+ New Vote</p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const signupBtn = document.querySelector('#sign-up') as HTMLButtonElement;
    const loginBtn = document.querySelector('#log-in') as HTMLButtonElement;
    const newVoteBtn = document.querySelector('.new-vote') as HTMLButtonElement;

    signupBtn.addEventListener('click', () => {
      window.location.href = '/signup';
    });

    loginBtn.addEventListener('click', () => {
      window.location.href = '/login';
    });

    async function authCheck() {
      try {
        const res = await fetch('http://localhost:3001/api/auth/protected', {
          method: 'GET',
          credentials: 'include',
        });

        if (!res.ok) {
          window.location.href = '/login'; // Redirect if not authenticated
          return false;
        }
        return true;
      } catch (error) {
        console.error('Error checking authentication:', error);
        return false;
      }
    }

    newVoteBtn.addEventListener('click', async () => {
      const isAuthenticated = await authCheck();
      if (isAuthenticated) {
        window.location.href = '/create';
      }
    });

    function displayPolls(polls) {
      const pollList = document.querySelector('.voting-list-container') as HTMLElement;
      pollList.innerHTML = ''; 

      polls.forEach((poll) => {
        const listItem = document.createElement('div');
        listItem.style.border = '3px solid black';
      listItem.style.width = '80%';
      listItem.style.textAlign = 'center';
      listItem.style.cursor = 'pointer';
      listItem.style.margin = '16px auto';
      listItem.style.padding = '16px';
      listItem.style.backgroundColor = 'white';
        listItem.style.cursor = 'pointer';

        const randomNum = Math.floor(Math.random() * 5) + 1; 
      const icon = document.createElement('img');
      icon.src = `/assets/${randomNum}.png`;
      icon.alt = 'Voting icon';
      icon.style.width = '24px'; 
      icon.style.height = '24px';
      icon.style.marginRight = '10px'; 
      listItem.appendChild(icon);


        const questionText = document.createElement('span');
      questionText.textContent = poll.question;
      listItem.appendChild(questionText);

        pollList.appendChild(listItem);

        listItem.addEventListener('click', () => {
          window.location.href = `/polls/${poll._id}`;
        });
      });
    }

    async function fetchPolls() {
      try {
        const response = await fetch('http://localhost:3001/api/poll/');
        if (!response.ok) {
          throw new Error('Failed to fetch polls');
        }
        const polls = await response.json();
        displayPolls(polls);
      } catch (error) {
        console.error('Error fetching polls:', error);
      }
    }

    fetchPolls();
  });
</script>


<style>
.home-container {
  padding: 0;
  margin: 0;
  height: 1200px;
  overflow: visible;
  background-color: black;
  
}



button {
  height: 40px;
  border-radius: 30px;
  font-size: 1.2rem;
  border: none;
  cursor: pointer;
  font-family: "Bungee Inline", sans-serif;
  background-color: black;
  color: white;
  transition: transform 0.3s ease;
}

button:first-child {
  margin-right: 40px;
}

button:hover {
  transform: scale(1.2);
}


.new-vote {
  border: 3px solid black;
  width: 80%;
  text-align: center;
  cursor: pointer;
  margin: 10px auto;
  padding: 16px;
  box-shadow: 2px 2px 0 2px black;
  background-color: white;
  z-index: 10;
  transition: transform 0.3s, box-shadow 0.3s ease;
}

.new-vote p {
  margin: 0;
  font-family: "VT323", monospace;
  font-size: 1.5rem;
}

.new-vote:hover {
  transform: translateY(4px);
  box-shadow: none;
}

.main-visual {
  background-image: url('/assets/main_visual.jpg');
  background-size: cover;
  background-position: center;
  width: 100vw;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 600px;
}

h1 {
  font-family: "Bungee Inline", sans-serif;
  font-weight: 400;
  font-size: 4rem;
}

.main-title {
  padding-bottom: 150px;
}

#title {
  margin-bottom: 16px;
}

.voting-list {
  border: 3px solid black;
  width: 90%;
  text-align: center;
  cursor: pointer;
  margin: 0 auto;
  background-color: white;
  display: flex;
  justify-content: center;
  align-items: center;
}

.out-container{
  border: 3px solid black;
  width: 100%;
  height:100%;
  text-align: center;
  cursor: pointer;
  margin: 10px;
  padding: 12px;
  background-color: white;
}

h2 {
  font-family: "VT323", monospace;
  font-size: 2rem;
}

.voting-item{
  border: 3px solid black;
  width: 80%;
  text-align: center;
  cursor: pointer;
  margin: 0 auto;
  padding: 16px;
  box-shadow: 2px 2px 0 2px black;
  background-color: white;
}

.voting-item:hover {
  background-color: lightgoldenrodyellow;
  transform: translateY(-4px);
}


@media screen and (max-width: 767px) {
  .buttons {
    display: flex;
    flex-direction: column;
    justify-content: center;
    text-align: center;
    margin: 0 auto;
  }

  #sign-up,
  #log-in {
    margin: 0 auto;
  }

  #log-in {
    margin-top: 8px;
  }

  button:first-child {
    margin-right: 0px;
  }

  .voting-list-container {
    padding: 10px;
    overflow-y: auto;
  }

  .voting-item {
    width: 100%;
    margin-bottom: 10px;
    padding: 15px;
    box-sizing: border-box;
  }
}

</style>