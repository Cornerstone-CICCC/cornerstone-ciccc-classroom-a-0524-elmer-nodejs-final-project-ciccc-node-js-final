---
import Layout from '../layouts/Layout.astro';
---

<Layout>
 <div class ="home-container" id = "home">
	<div class ="main-visual">
		<div class="main-title">
			<h1 id ="title">Voting App</h1>
			<div class ="buttons">
				<button id = "sign-up">Sign Up</button>
				<button id ="log-in">Log In</button>
			</div>
		</div>
	</div>
	<div class="voting-list">
		<div class="inline">
			<h2>Voting List</h2>
			<ul class="voting-list"></ul>
			<div class="new-vote">
				<p>+ New Vote</p>
			</div>
		</div>
	</div>
</div>
</Layout>
<script>
	 document.addEventListener('DOMContentLoaded', () => {
		const signupBtn = document.querySelector('#sign-up') as HTMLButtonElement;
		const loginBtn = document.querySelector('#log-in') as HTMLButtonElement;
		const newVoteBtn = document.querySelector('.new-vote') as HTMLButtonElement;
	
			signupBtn.addEventListener('click', () => {
				window.location.href = '/signup'; 
			});
	
			loginBtn.addEventListener('click', () => {
				window.location.href = '/login'; 
			});

			newVoteBtn.addEventListener('click', () => {
        const isLoggedIn = localStorage.getItem('token'); 
        if (!isLoggedIn) {
          alert('Please log in');
        }else{
          window.location.href = '/create'; 
        }
			});

			function displayPolls(polls) {
				const pollList = document.querySelector(".voting-list") as HTMLElement;

				pollList.innerHTML = "";

				polls.forEach((poll) => {
					const listItem = document.createElement("li");
					listItem.textContent = poll.question; 
					pollList.appendChild(listItem);

					listItem.addEventListener("click", () => {
					window.location.href = `/vote.astro?id=${poll._id}`;
				});
				});
			}

			async function fetchPolls() {
  		try {
			const response = await fetch("http://localhost:3001/api/poll"); 
			if (!response.ok) {
				throw new Error("Failed to fetch polls");
			}

				const polls = await response.json();
				displayPolls(polls); 
			} catch (error) {
				console.error("Error fetching polls:", error);
			}
		}

		fetchPolls();
	 })
</script>
<style>
	.home-container{
		padding:0;
		margin:0;
		height: 1200px; 
		overflow: visible;
		background-color: black;
	}

	button{
		height:40px;
		border-radius: 30px;
		font-size: 1.2rem;
		border:none;
		cursor: pointer;
		font-family: "Bungee Inline", sans-serif;
		background-color: black;
		color: white;
	}

	button:first-child{
		margin-right:40px;
	}

	button:hover{
		scale: calc(1.2);
	}

	.new-vote{
		border:3px black solid;
		width:80%;
		text-align: center;
		cursor:pointer;
		margin:0 auto;
		padding:16px;
		box-shadow:2px 2px 0 2px black;
	}

	.new-vote p{
		margin:0;
		font-family: "VT323", monospace;
		font-size: 1.5rem;
	}

	.new-vote:hover{
		transform: translateY(4px);
  	box-shadow: none;
	}

	.main-visual{
		background-image: url('/src/assets/main_visual.jpg');
		background-size: cover;
		background-position: center;
		width: 100vw;
		text-align: center;
		display: flex;
		justify-content: center;
		align-items: center;
		min-height: 600px;
		overflow: visible;
	}

	h1{
	  font-family: "Bungee Inline", sans-serif;
		font-weight: 400;
		font-style: normal;
		font-size: 4rem;
	}

	.main-title{
		padding-bottom: 150px;
	}

	#title{
		margin-bottom:16px;
	}

	.voting-list{
		border:3px solid black;
		text-align: center;
		display: flex;
		justify-content: center;
		padding:16px;
		margin:100px auto;
		width:80%;
		box-shadow:2px 2px 0 2px black;
		background-color: white;
	}

	.inline{
		border:3px solid black;
		width:100%;
		padding:40px;
		box-shadow:2px 2px 0 2px black;
	}

	h2{
  font-family: "VT323", monospace;
  font-size: 2rem;
	}
</style>

